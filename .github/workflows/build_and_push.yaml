name: Deploy to Staging

env:
  APP_NAME: vmms-backend
  GHCR_REPOSITORY: vmms-backend

on:
  push:
    branches:
      - main

jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Prepare environment variables
        run: |
          APP_NAME_SANITIZED=$(echo "${{ env.APP_NAME }}" | tr ':' '-')
          IMAGE_TAG="$(date '+%H%M%S-%d-%m-%Y')"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "APP_NAME_SANITIZED=$APP_NAME_SANITIZED" >> $GITHUB_ENV

      - name: Build and push the image to ghcr
        run: |
          docker login --username GITHUBUSERNAME --password ${{ secrets.GH_PAT }} ghcr.io
          docker build --no-cache -f ./docker/prod.Dockerfile -t $GHCR_REPOSITORY:$IMAGE_TAG --tag ghcr.io/dave-mash/vmms-backend:latest .
          docker push ghcr.io/dave-mash/vmms-backend:latest
        
      - name: Set up kubectl # A Github Action provided by Microsoft Azure to allow one to install and configure a specific version of kubectl (Kubernetes CLI)
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.23.0'

      - name: SSH into the server and configure kubectl to use the K8s config from GitHub secrets
        run: |
          sshpass -p ${{ secrets.VM_PASSWORD }} ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_ADDRESS }} -p ${{ secrets.VM_PORT }} << EOF
          mkdir -p $HOME/.kube  # Create .kube directory if it doesn't exist
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          export KUBECONFIG=$HOME/.kube/config
          kubectl config use-context vmms  # Switch to the desired context
          kubectl get nodes  # Test if kubectl is working
          EOF
        # Deploy the application to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml --validate=false
          kubectl apply -f k8s/service.yaml --validate=false

      # - name: Check deployment status
      #   run: |
      #     kubectl rollout status deployment/vmms-backend -n vmms-namespace

